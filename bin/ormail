#!/opt/homebrew/bin/bb
(ns ormail
  (:require [babashka.cli :as cli]
            [babashka.fs :as fs]
            [babashka.process :as process]
            [clojure.edn :as edn]
            [clojure.string :as str]
            [taoensso.timbre :as timbre])
  (:import [java.time Duration LocalDateTime ZoneId]))

(def ^:private silenced?-file
  "/tmp/ormail-silence")

(def ^:private vacation-mode?-file
  "/tmp/ormail-vacation-mode")

(def ^:private last-sync-file
  "/tmp/ormail-last-sync")

(defn- notmuch-path [opts]
  (or (-> opts :config :notmuch-path)
      "/opt/homebrew/bin/notmuch"))

(defn- mbsync-path [opts]
  (or (-> opts :config :mbsync-path)
      "/opt/homebrew/bin/mbysync"))

(defn- silenced? []
  (fs/exists? silenced?-file))

(defn- vacation-mode? []
  (fs/exists? vacation-mode?-file))

(defn- more-than-n-processes-running? [pattern n]
  (let [lines (-> (process/process "ps aux")
                  (process/process (format "grep -E '%s'" pattern))
                  (process/process {:out :string} "grep -v grep")
                  deref
                  :out
                  str/trim
                  (str/split #"\n"))]
    (-> (remove str/blank? lines)
        count
        (> n))))

(defn- sync-running? []
  (or (more-than-n-processes-running? "ormail +(sync|update)" 0)
      (more-than-n-processes-running? "ormail +xbar" 1)))

(defn- log-info [{:keys [quiet]} message]
  (when-not quiet
    (timbre/info message)))

(defn- shell-to-string [command]
  (-> (process/shell {:out :string} command)
      :out
      str/trim))

(defn- shell-to-list [command]
  (filter (comp not str/blank?)
          (-> (shell-to-string command)
              (str/split #"\n"))))

(defn- shell [{:keys [quiet]} command]
  (let [{:keys [proc]} (process/shell (when quiet
                                        {:out :string
                                         :err :string})
                                      command)]
    (.waitFor proc 5 java.util.concurrent.TimeUnit/MINUTES)))

(defn- notmuch-count [opts condition]
  (Integer/parseInt (shell-to-string (format "'%s' count %s" (notmuch-path opts) condition))))

(defn- command-update [opts]
  (log-info opts "updating database...")
  (shell opts (format "'%s' new" (notmuch-path opts)))
  (shell opts (format "'%s' tag -new tag:new" (notmuch-path opts))))

(defn- remove-uid-from-filename [filename]
  (str/replace filename #",U=.*$" ""))

(defn- make-unique [filename]
  (let [counter (atom 0)]
    (loop [filename filename]
      (if (fs/exists? filename)
        (do
          (swap! counter inc)
          (recur (str filename "__" @counter)))
        filename))))

(defn- command-archive [opts]
  (log-info opts "archiving mail...")
  (shell opts (format "'%s' tag +archived NOT tag:archived AND NOT tag:unread AND NOT tag:inbox AND date:..31-days"
                      (notmuch-path opts)))
  (let [database-path (shell-to-string (format "'%s' config get database.path"
                                               (notmuch-path opts)))
        database-path (str/replace database-path #"/+$" "")
        database-path-with-slash (str database-path "/")
        files-to-archive (shell-to-list (format "'%s' search --output=files tag:archived AND NOT 'folder:/archive\\/.*/'"
                                                (notmuch-path opts)))]
    (doseq [filename files-to-archive]
      (assert (str/starts-with? filename database-path-with-slash)
              (format "filename not inside database-path (%s): %s" database-path filename))
      (let [relative-path (str/replace-first filename database-path-with-slash "")
            relative-path-without-uid (remove-uid-from-filename relative-path)
            archive-filename (format "%s/archive/%s" database-path relative-path-without-uid)
            archive-filename (make-unique archive-filename)
            archive-filename-directory (str/replace archive-filename #"/[^/]*$" "")]
        (shell opts (format "mkdir -p '%s'" archive-filename-directory))
        (shell opts (format "mv '%s' '%s'" filename archive-filename))))))

(defn- command-sync [{:keys [archive]
                      :as opts}]
  (log-info opts "syncing mail...")
  (when archive
    (command-archive opts))
  (shell opts (format "'%s' -a" (mbsync-path opts)))
  (command-update opts)
  (process/shell {:out :string} "touch" last-sync-file)
  nil)

(defn- command-fix-duplicate-uids [{:keys [directory]
                                    :as opts}]
  (assert directory)
  (let [files (shell-to-list (format "ls -1 '%s'" directory))
        uids (into {}
                   (keep (fn [filename]
                           (when-let [[_ uid] (re-find #",U=(\d+):" filename)]
                             [filename uid]))
                         files))
        grouped-by-uid (group-by uids files)]
    (doseq [[uid filenames] grouped-by-uid]
      (let [filenames-to-fix (drop 1 filenames)]
        (when (pos? (count filenames-to-fix))
          (log-info opts (format "fixing %d message(s) duplicating UID %s" (count filenames-to-fix) uid))
          (doseq [filename filenames-to-fix]
            (let [fixed-filename (remove-uid-from-filename filename)]
              (shell opts (format "mv '%s/%s' '%s/%s'" directory filename directory fixed-filename)))))))))

(defn- last-sync-time []
  (when (fs/exists? last-sync-file)
    (-> (fs/last-modified-time last-sync-file)
        .toInstant
        (LocalDateTime/ofInstant (ZoneId/systemDefault)))))

(defn- minutes-since-last-sync []
  (when-let [last-sync-time* (last-sync-time)]
    (let [now (LocalDateTime/now)]
      (.toMinutes (Duration/between last-sync-time* now)))))

(defn- sync-needed? [{:keys [sync-every-n-minutes]
                      :or {sync-every-n-minutes 15}}]
  (let [minutes-since-last-sync* (minutes-since-last-sync)]
    (or (nil? minutes-since-last-sync*)
        (<= sync-every-n-minutes minutes-since-last-sync*))))

(defn- command-xbar [opts]
  (if (sync-running?)
    (println "syncing... | color=#707070")
    (do
      (when (sync-needed? opts)
        (command-sync opts))
      (let [unread-count (notmuch-count opts
                                        (cond-> "--output=threads tag:unread"
                                          (vacation-mode?) (str " AND NOT tag:work")))]
        (println (cond
                   (silenced?) "silenced | color=#606060"
                   (pos? unread-count) (format ":incoming_envelope: %d threads | color=red" unread-count)
                   :else "no unread mail | color=#707070")))))
  (println "---")
  (println (if (silenced?)
             (format "unsilence | color=green shell=\"%s\" param1=toggle-silenced " *file*)
             (format "silence | color=red shell=\"%s\" param1=toggle-silenced " *file*)))
  (println (if (vacation-mode?)
             (format "work | color=green shell=\"%s\" param1=toggle-vacation-mode " *file*)
             (format "vacation | color=orange shell=\"%s\" param1=toggle-vacation-mode " *file*)))
  (println (format "sync | color=yellow shell=\"%s\" param1=sync" *file*)))

(defn- exclude-address [exclude address]
  (when exclude
    (re-find exclude address)))

(defn- filter-address [pattern address]
  (let [pattern (map str/lower-case pattern)
        address (str/lower-case address)]
    (loop [[word & rest] pattern]
      (if word
        (if (str/includes? address word)
          (recur rest)
          false)
        true))))

(defn- command-addresses [{:keys [exclude pattern]
                           :as opts}]
  (->> (shell-to-list (format "'%s' address NOT tag:spam'" (notmuch-path opts)))
       (remove (partial exclude-address (when exclude
                                          (re-pattern exclude))))
       (filter (partial filter-address pattern))
       (str/join "\n")
       println))

(defn- command-xbar-on? [_opts]
  (println (if (silenced?)
             "no"
             "yes"))
  nil)

(defn- command-toggle-silenced [_opts]
  (if (silenced?)
    (process/shell "rm" silenced?-file)
    (process/shell "touch" silenced?-file))
  nil)

(defn- command-toggle-vacation-mode [_opts]
  (if (vacation-mode?)
    (process/shell "rm" vacation-mode?-file)
    (process/shell "touch" vacation-mode?-file))
  nil)

(defn- command-help [_opts]
  (println "Usage:
    ormail --help
    ormail <command> [args...]

Commands:
  help                              show this help
  sync [--archive]                  sync the local mail dir with remote IMAP servers
  update                            update the notmuch database based on the files in mail dir,
                                    done automatically during sync
  addresses [--exclude <regexp>]    list all addresses, exclude those matching the given pattern
  xbar-on?                          returns \"yes\" or \"no\", depending on whether notifications
                                    are turned on or off
  toggle-silenced                   toggle whether email notifications are shown in xbar
  toggle-vacation-mode              toggle vacation mode, where work emails are filtered
  xbar                              act as an xbar plugin
  fix-uids --directory <directory>  fix UID duplication in a mail dir directory

General options:
  --quiet                           print only the necessary output
"))

(def ^:private commands
  {:help command-help
   :sync command-sync
   :archive command-archive
   :update command-update
   :addresses command-addresses
   :xbar-on? command-xbar-on?
   :toggle-silenced command-toggle-silenced
   :toggle-vacation-mode command-toggle-vacation-mode
   :xbar command-xbar
   :fix-uids command-fix-duplicate-uids})

(defn- main [{:keys [opts]}]
  (let [config-file (str (fs/expand-home "~/.ormail.edn"))
        config (when (fs/exists? config-file)
                 (edn/read-string (slurp config-file)))
        command (:command opts)
        opts (cond-> opts
               (= command :xbar) (assoc :quiet true))
        show-help? (:help opts)
        config-opts (get config command)
        opts (assoc opts :config config)]
    (if (and show-help?
             (not command))
      (command-help opts)
      (apply (get commands command) [(merge config-opts opts)]))))

(main (cli/parse-args *command-line-args*
                      {:coerce {:command :keyword
                                :xbar :boolean
                                :help :boolean
                                :quiet :boolean
                                :exclude :string
                                :pattern [:string]}
                       :validate {:command commands}
                       :args->opts [:command :pattern]}))
